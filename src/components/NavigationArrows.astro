---
import { Icon } from "astro-icon";

interface Props {}

const {} = Astro.props;
---

<div class="nav-arrow-wrapper">
  <div class="nav-arrow">
    <a id="prev-arrow" href="#prev">
      <Icon class="nav-arrow-icon" name="icon-park-outline:double-up" />PREV</a
    >
  </div>
  <div class="nav-arrow">
    <a id="next-arrow" href="#next"
      >NEXT<Icon
        class="nav-arrow-icon"
        name="icon-park-outline:double-down"
      /></a
    >
  </div>
</div>

<style>
  .nav-arrow-wrapper {
    padding: 80px 2px;
    height: 100%;
    width: 36px;
    background-color: #dbeef780;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-between;
    @media only screen and (max-width: 750px) {
      width: 28px;
    }
  }
  .nav-arrow {
    display: flex;
    flex-direction: column;
    text-orientation: upright;
    writing-mode: vertical-rl;
  }

  #prev-arrow,
  #next-arrow {
    transition: transform ease 300ms;
    color: #779eb280;
  }

  #prev-arrow:hover {
    transform: translate(0, -8px);
    transition: transform ease 300ms;
  }

  #next-arrow:hover {
    transform: translate(0, 8px);
    transition: transform ease 300ms;
  }

  .hide-arrow {
    display: none;
  }

  .active-item {
    background-color: pink;
  }
  .nav-arrow-icon {
    width: 16px;
  }
</style>

<script>
  const callbackRouter: IntersectionObserverCallback = (entries, _observer) => {
    let entry = entries[0];
    let target = entry.target;

    let nextArrow = document.getElementById("next-arrow") as
      | HTMLLinkElement
      | undefined
      | null;

    let prevArrow = document.getElementById("prev-arrow") as
      | HTMLLinkElement
      | undefined
      | null;

    const prevArrowWrapper = document.querySelector("#prev-arrow");
    const nextArrowWrapper = document.querySelector("#next-arrow");

    const navitems = document.querySelectorAll(".nav-items.nav-anchor");

    const TARGET_IDS = [
      "home", // 0
      "productatcurant", // 1
      "paymentforms", // 2
      "widgetlibrary", // 3
      // "cats", // 4
      "contact", // 5
    ];

    if (entry.isIntersecting) {
      navitems.forEach((i) => {
        document
          .querySelector(".nav-items-wrapper a.active-item")
          ?.classList.remove("active-item");
      });

      let index = TARGET_IDS.indexOf(target.id);
      let previousSectionIndex = index - 1;
      let shouldHidePreviousButton = previousSectionIndex < 0;
      let nextSectionIndex = index + 1;
      let shouldHideNextButton = TARGET_IDS.length < nextSectionIndex + 1;

      if (shouldHidePreviousButton) {
        prevArrowWrapper?.classList.add("hide-arrow");
      } else {
        prevArrowWrapper?.classList.remove("hide-arrow");
        const previousSection = TARGET_IDS[previousSectionIndex];
        prevArrow?.setAttribute("href", `#${previousSection}`);
      }

      if (shouldHideNextButton) {
        nextArrowWrapper?.classList.add("hide-arrow");
      } else {
        nextArrowWrapper?.classList.remove("hide-arrow");
        const nextSection = TARGET_IDS[nextSectionIndex];
        nextArrow?.setAttribute("href", `#${nextSection}`);
      }

      document
        .querySelector(`#nav-item-${target.id}`)
        ?.classList.add("active-item");
    }
  };

  const WIDE_THRESHOLD = 0.1;
  const NARROW_THRESHOLD = 0.001;

  const getThreshold = () => {
    return window.innerWidth < 600 ? NARROW_THRESHOLD : WIDE_THRESHOLD;
  };

  const newObserver = () => {
    const observer = new IntersectionObserver(callbackRouter, {
      root: document.querySelector("#section-wrapper"),
      threshold: getThreshold(),
    });
    const sections = document.querySelectorAll(".in-view");
    sections.forEach(observer.observe.bind(observer));
    return observer;
  };

  const disconnectObserver = (observer: IntersectionObserver) => {
    observer.disconnect();
  };

  let observer = newObserver();

  window.addEventListener("resize", () => {
    disconnectObserver(observer);
    observer = newObserver();
  });
</script>
